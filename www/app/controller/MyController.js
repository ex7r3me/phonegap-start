/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MyController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            detailPanel: 'mainview #detailPanel',
            primarychart: 'polar#primary-chart',
            requestdelay: 'label#request-delay',
            runButton: 'button#runButton',
            requestdelay2: 'label#request-delay',
            title: 'label#title',
            questiontext: 'textareafield#question-text'
        },

        control: {
            "mainview #runButton": {
                tap: 'runAction'
            },
            "button#mybutton3": {
                tap: 'onButtonTap'
            },
            "button#mybutton4": {
                tap: 'onButtonTap1'
            },
            "button#create-question": {
                tap: 'onCreateQuestion'
            },
            "button#submit-question": {
                tap: 'onSubmitQuestion'
            }
        }
    },

    runAction: function(target) {
        navigator.app.exitApp();

        // Bind model to view
        //this.getDetailPanel().setRecord(model);


    },

    onButtonTap: function(button, e, eOpts) {
        var me = this;
        me.start = new Date().getTime();
        websocket.send('1');
    },

    onButtonTap1: function(button, e, eOpts) {
        var me = this;
        me.start = new Date().getTime();
        websocket.send('0');
    },

    onCreateQuestion: function(button, e, eOpts) {

    },

    onSubmitQuestion: function(button, e, eOpts) {
        var qText = this.getQuestiontext().getValue();
        qsocket.send(qText);
        qsocket.send("101");
    },

    loadPStore: function() {

        pchart = this.getPrimarychart();
        var mstore = pchart.getStore();
        mstore.load();
    },

    init: function(application) {
        var me = this;
        websocket = Ext.create ('Ext.ux.WebSocket', {
            url: 'ws://130.185.74.60:8080' ,
            listeners: {
                open: function (ws) {
                    console.log ('The websocket is ready to use');
                    me.getRequestdelay().setHtml('Connected!');
                    //ws.send ('This is a simple text');
                } ,
                close: function (ws) {
                     me.getRequestdelay().setHtml('Disconnected :(');
                } ,
                error: function (ws, error) {
                    Ext.Error.raise (error);
                } ,
                message: function (ws, message) {
                    if (message.question == undefined){
                    var end = new Date().getTime();
                    var time = end - me.start;
                    console.log(time);
                    me.getRequestdelay().setHtml('Time (send,receive & chart update) :'+time+'ms');
                    me.getPrimarychart().getStore().setData(message);
                    }
                }
            }

        });
        qsocket = Ext.create ('Ext.ux.WebSocket', {
            url: 'ws://130.185.74.60:8080' ,
            listeners: {
                open: function (ws) {
                    ws.send ('101');
                    me.getRequestdelay().setHtml('Question Connected!');

                } ,
                close: function (ws) {
                     me.getRequestdelay().setHtml('Question Disconnected :(');
                } ,
                error: function (ws, error) {
                    Ext.Error.raise (error);
                } ,
                message: function (ws, message) {
                    if (message.question){
                    jiji = message;
                   me.getTitle().setHtml(message.question);
                    }
                }
            }

        });
    }

});